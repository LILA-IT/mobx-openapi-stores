import { action, computed, flow, makeObservable, observable } from 'mobx';
import { toFlowGeneratorFunction } from 'to-flow-generator-function';

import { type Configuration } from '../openapi-generator';
import { callApi } from '../utils/api';

import { type ApiType } from '../types/ApiType';
import { LoadingStore } from './LoadingStore';

/**
 * @class ApiStore
 * @template TApi - The type of the generated API client (e.g., PetApi from openapi-generator).
 * @template TConfig - The configuration type required by the TApi client constructor.
 * @description Base store for managing an API client instance and making API calls.
 * It extends `LoadingStore` to provide loading state indicators during API interactions.
 * Subclasses are expected to implement the `initApi` method to set up the specific API client.
 *
 * @extends LoadingStore
 *
 * @property {TApi | null} api - The observable API client instance. Null until `initApi` is successfully called.
 * @property {boolean} apiIsSet - A computed property that returns true if the API client has been initialized.
 *
 * @method setApi - Action to set the API client instance.
 * @method initApi - Abstract-like method that must be implemented by subclasses to initialize the `api` property. It's called with the API configuration.
 * @method apiCall - A MobX flow-wrapped method for making generic API calls using the initialized API client. Handles setting loading states automatically.
 *                   It expects an endpoint (a key of TApi) and arguments for that endpoint.
 *
 * @example
 * // Assume MyGeneratedApi is a class generated by OpenAPI generator
 * // and MyApiConfig is its configuration type.
 * class MySpecificApiStore extends ApiStore<MyGeneratedApi, MyApiConfig> {
 *   constructor() {
 *     super('MySpecificApiStore');
 *     makeObservable(this, { initApi: action }); // Important for MobX
 *   }
 *
 *   initApi(config: MyApiConfig) {
 *     this.setApi(new MyGeneratedApi(config));
 *   }
 *
 *   async fetchSomeData(id: string) {
 *     // 'someEndpoint' would be a method key on MyGeneratedApi
 *     // The arguments { id } would match the parameters of MyGeneratedApi.someEndpoint
 *     return await this.apiCall('someEndpoint', { id });
 *   }
 * }
 */
export class ApiStore<
  TApi extends ApiType,
  TConfig extends Configuration = TApi extends ApiType<infer C> ? C : never,
> extends LoadingStore {
  /**
   * @property {TApi | null} api
   * @description The observable API client instance. It is `null` until `initApi` is successfully called and `setApi` populates it.
   *              Used by `apiCall` to execute requests.
   * @observable
   */
  api: TApi | null = null;
  name: string = '';

  constructor(name: string) {
    super();
    makeObservable(this, {
      initApi: action.bound,
      setApi: action,
      apiIsSet: computed,
      api: observable,
      name: false,
      apiCall: flow,
    });
    this.name = name;
    this.setIsLoading(true); // Typically, an API store might start by fetching initial data or waiting for config.
  }

  /**
   * @method setApi
   * @description Sets the API client instance for the store. Typically called from within `initApi`.
   * @param {TApi} api - The API client instance.
   * @action
   */
  setApi = (api: TApi) => {
    this.api = api;
    this.setIsLoading(false);
  };

  /**
   * @method initApi
   * @description Initializes the API client. This method **must** be implemented by subclasses.
   *              It should construct the API client (e.g., `new GeneratedApi(config)`) and then call `this.setApi()`.
   * @param {TConfig} config - The configuration object required by the API client (e.g., base path, middleware).
   * @throws {Error} If not implemented by a subclass.
   * @action bound
   */
  initApi(config: TConfig) {
    // This default implementation throws an error to ensure subclasses implement it.
    throw new Error('initApi is not implemented by ' + this.name);
  }

  /**
   * @property apiIsSet
   * @description Computed property that checks if the API client has been initialized.
   * @returns {boolean} True if `this.api` is not null, false otherwise.
   * @computed
   */
  get apiIsSet() {
    return this.api !== null;
  }

  /**
   * @method apiCall
   * @template TGenericApi - The API client type used for this specific call. Defaults to `TApi` (the store's primary API type).
   * @template TGenericEndpoint - A key (method name) of `TGenericApi`.
   * @template TEndpointArgs - The type of the arguments for the specified `TGenericEndpoint`.
   * @description A MobX flow-wrapped method for making generic API calls using the initialized API client (`this.api`).
   *              It automatically handles setting the store's loading state before and after the call.
   *              The actual generic parameters `Api`, `Endpoint`, and `Args` are internal to the method's implementation.
   * @param {TGenericEndpoint} apiCall - The name of the API method to call (must be a key of `TApi`).
   * @param {TEndpointArgs} args - The arguments to pass to the API method.
   * @returns {Promise<any>} A promise that resolves with the result of the API call. The actual return type depends on the called API endpoint.
   * @throws {Error} If the API client (`this.api`) has not been initialized.
   * @flow
   */
  apiCall = flow(
    toFlowGeneratorFunction(
      async <
        Api extends ApiType = TApi, // Internal generic for the API type
        Endpoint extends keyof Api = keyof Api, // Internal generic for the endpoint key
        // @ts-expect-error marks as error but works
        Args extends Parameters<Api[Endpoint]>[0] = Parameters<
          // @ts-expect-error marks as error but works
          TApi[Endpoint]
        >[0],
      >(
        apiCall: Endpoint, // This is the actual parameter name for the endpoint
        args: Args extends undefined ? never : Args, // This is the actual parameter name for arguments
      ) => {
        try {
          if (!this.api) throw new Error(`${this.name} Api is not set`);
          this.setIsLoading(true);
          // @ts-expect-error marks as error but works
          return await callApi<Api, Endpoint, Args>(apiCall, args, this.api);
        } finally {
          this.setIsLoading(false);
        }
      },
    ),
  );
}
